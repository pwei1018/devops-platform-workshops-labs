#!/usr/bin/env groovy

//ENV Vars
def TOOLS_NAMESPACE = "s4g19x-pwei1018-openshift201-may2019-tools"
def DEV_NAMESPACE = "s4g19x-pwei1018-openshift201-may2019-dev"
def PROD_NAMESPACE = "s4g19x-pwei1018-openshift201-may2019-prod"
def SUB_DOMAIN = "pathfinder.gov.bc.ca"
def LOKI_SERVICE  = "pwei1018-loki"
def PROMETHEUS_SERVICE  = "pwei1018-prometheus"
def GRAFANA_SERVICE  = "pwei1018-grafana"

def call(def text_pr) {
  def repository_url = scm.userRemoteConfigs[0].url
  def repository_name = repository_url.replace("git@github.com:","").replace(".git","")

  withCredentials([string(credentialsId: '<YOUR-TOKEN-ID>', variable: 'GITHUB_TOKEN')]) {
    sh "curl -s -H \"Authorization: token ${GITHUB_TOKEN}\" -X POST -d '{\"body\": \"${text_pr}\"}' \"https://api.github.com/repos/${repository_name}/issues/${ghprbPullId}/comments\""
  }
}

/*node("python") {
    stage ('pytest'){
        //env.PATH="/usr/local/bin:${env.PATH}"
        sh 'echo $PATH'
        sh "python --version"
        sh "python3.7 --version"
        sh "pip3.7 --version"

    }
}*/
def mylabel = 'test-python' + UUID.randomUUID().toString()

//Pipeline
podTemplate(
    label: mylabel,
    name: 'jenkins-slave-python',
    serviceAccount: 'jenkins',
    cloud: 'openshift',
    containers: [
      containerTemplate(
        name: 'jnlp',
        image: '172.30.1.1:5000/local-tools/jenkins-slave-python3:latest',
        resourceRequestCpu: '1000m',
        resourceLimitCpu: '2000m',
        resourceRequestMemory: '2Gi',
        resourceLimitMemory: '4Gi',
        workingDir: '/tmp',
        command: '',
        args: '${computer.jnlpmac} ${computer.name}'
      )
    ]
  ){
    node(mylabel) {
        stage ('Checkout Source Code'){
            dir ('simple_pipeline') {
                checkout scm
                GIT_COMMIT_SHORT_HASH = sh (
                        script: """git describe --always""", returnStdout: true
                    ).trim()
                GIT_COMMIT_AUTHOR = sh (
                        script: """git show -s --pretty=%an""", returnStdout: true
                    ).trim()
                echo $GIT_COMMIT_SHORT_HASH
                echo $GIT_COMMIT_AUTHOR
        }

        stage('Run pytest') {
            echo "Running pytest ... "
            sh '''
            #!/bin/bash
            env
            pwd
            '''
            dir('auth-api') {
                try {
                    sh '''
                        pwd
                        python --version
                    '''
                } catch (Exception e) {
                    echo "EXCEPTION: ${e}"
                }
            }
        }
      }
  }
        /*
        stage ('Deploy Loki to Dev'){
            dir ('simple_pipeline') {
                sh "oc process -f openshift201/templates/loki_template.yaml -p  LOKI_SERVICE_NAME=${LOKI_SERVICE} | oc apply -f - -n ${DEV_NAMESPACE}"
                sh "echo Wait for service to be up"
                timeout (time: 180, unit: 'SECONDS'){
                    openshift.withCluster() {
                        openshift.withProject("${DEV_NAMESPACE}") {
                            def dc = openshift.selector('deployment', "${LOKI_SERVICE}")
                            // this will wait until the desired replicas are available
                            dc.rollout().status()
                        }
                    }
                }
            }
        }

        stage ('Deploy Prometheus to Dev'){
            dir ('simple_pipeline') {
                sh "oc process -f openshift201/templates/prometheus_template.yaml -p  PROMETHEUS_SERVICE_NAME=${PROMETHEUS_SERVICE} | oc apply -f - -n ${DEV_NAMESPACE}"
                sh "echo Wait for service to be up"
                timeout (time: 180, unit: 'SECONDS'){
                    openshift.withCluster() {
                        openshift.withProject("${DEV_NAMESPACE}") {
                            def dc = openshift.selector('deployment', "${PROMETHEUS_SERVICE}")
                            // this will wait until the desired replicas are available
                            dc.rollout().status()
                        }
                    }
                }
            }
        }

        stage ('Deploy Grafana to Dev'){
            dir ('simple_pipeline') {
                sh "oc process -f openshift201/templates/grafana_template.yaml \
                    -p GRAFANA_SERVICE_NAME=${GRAFANA_SERVICE}\
                    -p LOKI_SERVICE_NAME=${LOKI_SERVICE} \
                    -p PROMETHEUS_SERVICE_NAME=${PROMETHEUS_SERVICE} \
                    -p ROUTE_SUBDOMAIN=${SUB_DOMAIN} \
                    -p NAMESPACE=${DEV_NAMESPACE} \
                    | oc apply -f - -n ${DEV_NAMESPACE}"

                sh "echo Wait for service to be up"
                timeout (time: 10, unit: 'MINUTES') {
                    openshift.withCluster() {
                        openshift.withProject("${DEV_NAMESPACE}") {
                            openshift.selector("dc", "${GRAFANA_SERVICE}").rollout().latest()
                            def latestDeploymentVersion = openshift.selector('dc',"${GRAFANA_SERVICE}").object().status.latestVersion
                            sh "echo ${GRAFANA_SERVICE}-${latestDeploymentVersion}"
                            def rc = openshift.selector('rc', "${GRAFANA_SERVICE}-${latestDeploymentVersion}")
                            rc.untilEach(1){
                                def rcMap = it.object()
                                return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
                            }
                        }
                    }
                }
            }
        }

        stage ('Deploy Loki to Prod'){
            dir ('simple_pipeline') {
                timeout (time: 180, unit: 'SECONDS'){
                    input "Deploy to Prod?"
                }

                sh "oc process -f openshift201/templates/loki_template.yaml -p  LOKI_SERVICE_NAME=${LOKI_SERVICE} | oc apply -f - -n ${PROD_NAMESPACE}"
                sh "echo Wait for service to be up"
                timeout (time: 180, unit: 'SECONDS'){
                    openshift.withCluster() {
                        openshift.withProject("${PROD_NAMESPACE}") {
                            def dc = openshift.selector('deployment', "${LOKI_SERVICE}")
                            // this will wait until the desired replicas are available
                            dc.rollout().status()
                        }
                    }
                }
            }
        }
    }
}*/