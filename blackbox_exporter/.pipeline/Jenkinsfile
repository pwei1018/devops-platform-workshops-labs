#!/usr/bin/env groovy

//ENV Vars
def TOOLS_NAMESPACE = "s4g19x-pwei1018-openshift201-may2019-tools"
def DEV_NAMESPACE = "s4g19x-pwei1018-openshift201-may2019-dev"
def PROD_NAMESPACE = "s4g19x-pwei1018-openshift201-may2019-prod"
def SUB_DOMAIN = "pathfinder.gov.bc.ca"
def LOKI_SERVICE  = "pwei1018-loki"
def PROMETHEUS_SERVICE  = "pwei1018-prometheus"
def GRAFANA_SERVICE  = "pwei1018-grafana"


//Pipeline
node {
    stage ('Buld in Tools Namespace'){
        dir ('simple_pipeline') {
            checkout scm
            timeout (time: 600, unit: 'SECONDS'){
                openshift.withCluster() {
                    openshift.withProject("${TOOLS_NAMESPACE}") {
                        def blackboxSelector = openshift.selector("bc", "blackboxexporter")
                        try {
                            blackboxSelector.object()
                            builds = blackboxSelector.related( "builds" )
                        } catch (Throwable t) {
                            nb = openshift.newBuild( "https://github.com/pwei1018/devops-platform-workshops-labs.git#pwei1018-201", "--context-dir=blackbox_exporter", "--name=blackboxexporter" )

                            // Print out information about the objects created by newBuild
                            echo "newBuild created: ${nb.count()} objects : ${nb.names()}"

                            // Filter non-BuildConfig objects and create selector which will find builds related to the BuildConfig
                            builds = nb.narrow("bc").related( "builds" )
                        }
                        openshift.selector("bc", "blackboxexporter").startBuild("--wait")
                        builds.watch {
                            // 'it' is bound to the builds selector.
                            // Continue to watch until at least one build is detected
                            if ( it.count() == 0 ) {
                                return false
                            }
                            // Print out the build's name and terminate the watch
                            echo "Detected new builds created by buildconfig: ${it.names()}"
                            return true
                        }

                        echo "Waiting for builds to complete..."

                        // Like a watch, but only terminate when at least one selected object meets condition
                        builds.untilEach {
                            return it.object().status.phase == "Complete"
                        }
                    }
                }
            }
        }
    }
}